{
    "#": [
        "This is a demo template configuration file. It follows the style of",
        "github.com/dotnet/templating and is inspired by the simplicity of the same. God bless",
        "those creatures of unusual templating simplicity. :-)",
        "P.S. Everything in a # block is ignored as a comment."
    ],
    "name": "Template Project Two",
    "description": "A demo template project for testing the Neoman templating engine.",
    "author": "Chris Dibbern",
    "tags": {
        "keywords": ["typescript", "templating", "demo"],
        "language": "Typescript", "#": "The primary language in this solution."
    },

    "#": "Provides a way of interacting with the user.",
    "input": {
        "use": "prompt", "#": "possible values: 'browser', 'prompt', or 'custom'.",
        "interfaceOptions": {},
        "handler": "",
        "preface": "",
        "define": {
            "color": "What is your favorite color?",
            "year": "What year were you born?",
            "wellbeing" : { "prompt": "How are you, today?", "type": "number", "validation": "^\\d+$", "default": 0 },
            "whatupdoc": { "promptHandler": "myquestions", "params": { "be" : "nice" } }
        }
    },

    "#": [
        "Replacements occur in the order they are defined. They apply to all non-ignored files unless constrained by a",
        "configuration type, glob, or custom handler."],
    "transform": [
        "# Strings like this are comments, in this section.",
        { "subject": "export", "regex": true, "with": "My replacement{{color}}", "files": ["**/*.js"] },

        "# A subsection applying to a particular glob or configuration.",
        {
            "section": { "files": "**/*.ts" },
            "subject": [

            ]
        },

        "/\/\//myreplacement/g", "# Do we support regex strings? Undecided.",
        { "subject": "what", "with": { "handler": "myaction" } },
        { "subject": "what", "with": { "handler": "myaction" } },

        "# Perform filetype-specific replacements with a plugin configured for that filetype.",
        { "subject": "mynamespace", "with": "yournamespace", "using": "typescript" },
        { "subject": "(\\w+)namespace", "with": "something else", "using": "typescript", "params": { "type": "namespace", "regex": true } },
        { "subject": "(\\w+)varname", "with": "othervarname", "using": "typescript", "params": { "type": "variable", "regex": true } },

        { "subject": "html>body>h1:first-child", "with": { "handler" : "myhandler" }, "using": "html" },
        { "subject": "html>body>h1:first-child", "with": "something simple", "using": "html", "params": { "type": "attr", "attr": "title" } }
    ],

    "pathTransform": [
        "/myfile.(\\d{4})-(\\d{2})-(\\d{2}).txt/yourfile\\1\\2\\3.txt/"
    ],

    "#":[
      "Event hooks are just a thought. We'll see where the project goes."  
    ],
    "eventHooks": {

    },

    "#": [
        "The root files and ignore sections define the set of files visible within the configuration sections.",
        "Configuration sections can have their own files and ignore sections, but can only subset from this outer set."
    ],
    "files": [
        "# minimatch glob comments are supported. \\# to escape.",
        "**/+(*.ts|*.js)"
    ],
    "ignore": [
        "base.spec.ts",
        ".neoman.config",
        ".git",
        "node_modules",
        "**/*.config.js"
    ],

    "#": "Optional section to define configurations per file type.",
    "configurations": {
        "//": "Configuration keys should be short but descriptive. ",
        "typescript": {
            "files": ["*.ts"],
            "ignore": [],
            "plugin": "typescript",
            "pluginConfig": {},
            "baseParams": { "#" : "to be extended/overridden by individual replace definitions." },
            "#": "Will try to find the plugin in ./plugins, first, then node_modules? Let's see."
        }
    }
}