import { injectable, inject } from 'inversify';
var NestedError = require('nested-error-stacks');

import { BaseInputManager } from '../base-input-manager';
import TYPES from '../../di/types';
import * as i from '../../i';
import * as it from '../../i/template';
import { RunOptions, Question} from '../../models';

@injectable()
export class DefaultsInputManager extends BaseInputManager {
    autoInc: number = 1;

    constructor() {
        super();
    }

    ask(config: it.IInputConfig, options: RunOptions): Promise<{ [key: string]: any }> {
        if (!config.define)
        {
            Promise.resolve({});
        }

        let dict = {};
        for(let key in config.define) {
            let q = this.getQuestion(config.define[key]);
            dict[key] = q.default;
        }

        return Promise.resolve(dict);
    }

    // TODO single responsibility - ought to be own class
    public getQuestion(def: string | it.ITemplateTypedInput | it.ITemplateScriptedInput): Question {
        var q = new Question();
        if ((<it.ITemplateTypedInput>def).default)
        {
            q.default = (<it.ITemplateTypedInput>def).default;
        }

        q.default = `NeomanAutogeneratedValue${this.autoInc++}`;

        return q;
    }
}